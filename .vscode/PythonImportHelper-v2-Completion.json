[
    {
        "label": "odoo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "odoo",
        "description": "odoo",
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "http",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "SUPERUSER_ID",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "http",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "tools",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "SUPERUSER_ID",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "tools",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "http",
        "importPath": "odoo",
        "description": "odoo",
        "isExtraImport": true,
        "detail": "odoo",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "odoo.http",
        "description": "odoo.http",
        "isExtraImport": true,
        "detail": "odoo.http",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "odoo.http",
        "description": "odoo.http",
        "isExtraImport": true,
        "detail": "odoo.http",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "odoo.exceptions",
        "description": "odoo.exceptions",
        "isExtraImport": true,
        "detail": "odoo.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "odoo.exceptions",
        "description": "odoo.exceptions",
        "isExtraImport": true,
        "detail": "odoo.exceptions",
        "documentation": {}
    },
    {
        "label": "UserError",
        "importPath": "odoo.exceptions",
        "description": "odoo.exceptions",
        "isExtraImport": true,
        "detail": "odoo.exceptions",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "psycopg2",
        "description": "psycopg2",
        "isExtraImport": true,
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "errorcodes",
        "importPath": "psycopg2",
        "description": "psycopg2",
        "isExtraImport": true,
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "psycopg2",
        "description": "psycopg2",
        "isExtraImport": true,
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "Forbidden",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "PG_CONCURRENCY_ERRORS_TO_RETRY",
        "importPath": "odoo.service.model",
        "description": "odoo.service.model",
        "isExtraImport": true,
        "detail": "odoo.service.model",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "total_ordering",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "total_ordering",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "weakref",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "weakref",
        "description": "weakref",
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "WeakValueDictionary",
        "importPath": "weakref",
        "description": "weakref",
        "isExtraImport": true,
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "selectors",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "selectors",
        "description": "selectors",
        "detail": "selectors",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "closing",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "closing",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "ISOLATION_LEVEL_AUTOCOMMIT",
        "importPath": "psycopg2.extensions",
        "description": "psycopg2.extensions",
        "isExtraImport": true,
        "detail": "psycopg2.extensions",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "odoo.tools",
        "description": "odoo.tools",
        "isExtraImport": true,
        "detail": "odoo.tools",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "odoo.tools",
        "description": "odoo.tools",
        "isExtraImport": true,
        "detail": "odoo.tools",
        "documentation": {}
    },
    {
        "label": "html_escape",
        "importPath": "odoo.tools",
        "description": "odoo.tools",
        "isExtraImport": true,
        "detail": "odoo.tools",
        "documentation": {}
    },
    {
        "label": "column_exists",
        "importPath": "odoo.tools.sql",
        "description": "odoo.tools.sql",
        "isExtraImport": true,
        "detail": "odoo.tools.sql",
        "documentation": {}
    },
    {
        "label": "table_exists",
        "importPath": "odoo.tools.sql",
        "description": "odoo.tools.sql",
        "isExtraImport": true,
        "detail": "odoo.tools.sql",
        "documentation": {}
    },
    {
        "label": "table_exists",
        "importPath": "odoo.tools.sql",
        "description": "odoo.tools.sql",
        "isExtraImport": true,
        "detail": "odoo.tools.sql",
        "documentation": {}
    },
    {
        "label": "openupgrade",
        "importPath": "openupgradelib",
        "description": "openupgradelib",
        "isExtraImport": true,
        "detail": "openupgradelib",
        "documentation": {}
    },
    {
        "label": "Serialized",
        "importPath": "odoo.addons.base_sparse_field.models.fields",
        "description": "odoo.addons.base_sparse_field.models.fields",
        "isExtraImport": true,
        "detail": "odoo.addons.base_sparse_field.models.fields",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "doctest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "doctest",
        "description": "doctest",
        "detail": "doctest",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "odoo.addons.queue_job.delay",
        "description": "odoo.addons.queue_job.delay",
        "isExtraImport": true,
        "detail": "odoo.addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "Delayable",
        "importPath": "odoo.addons.queue_job.delay",
        "description": "odoo.addons.queue_job.delay",
        "isExtraImport": true,
        "detail": "odoo.addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "DelayableGraph",
        "importPath": "odoo.addons.queue_job.delay",
        "description": "odoo.addons.queue_job.delay",
        "isExtraImport": true,
        "detail": "odoo.addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "Delayable",
        "importPath": "odoo.addons.queue_job.delay",
        "description": "odoo.addons.queue_job.delay",
        "isExtraImport": true,
        "detail": "odoo.addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "odoo.addons.queue_job.job",
        "description": "odoo.addons.queue_job.job",
        "isExtraImport": true,
        "detail": "odoo.addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "odoo.addons.queue_job.job",
        "description": "odoo.addons.queue_job.job",
        "isExtraImport": true,
        "detail": "odoo.addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "odoo.tests",
        "description": "odoo.tests",
        "isExtraImport": true,
        "detail": "odoo.tests",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "odoo.tests",
        "description": "odoo.tests",
        "isExtraImport": true,
        "detail": "odoo.tests",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "odoo.tests",
        "description": "odoo.tests",
        "isExtraImport": true,
        "detail": "odoo.tests",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "odoo.tests",
        "description": "odoo.tests",
        "isExtraImport": true,
        "detail": "odoo.tests",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "odoo.tests",
        "description": "odoo.tests",
        "isExtraImport": true,
        "detail": "odoo.tests",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "odoo.tests",
        "description": "odoo.tests",
        "isExtraImport": true,
        "detail": "odoo.tests",
        "documentation": {}
    },
    {
        "label": "common",
        "importPath": "odoo.tests",
        "description": "odoo.tests",
        "isExtraImport": true,
        "detail": "odoo.tests",
        "documentation": {}
    },
    {
        "label": "lxml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lxml",
        "description": "lxml",
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "etree",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "JobDecoder",
        "importPath": "odoo.addons.queue_job.fields",
        "description": "odoo.addons.queue_job.fields",
        "isExtraImport": true,
        "detail": "odoo.addons.queue_job.fields",
        "documentation": {}
    },
    {
        "label": "JobEncoder",
        "importPath": "odoo.addons.queue_job.fields",
        "description": "odoo.addons.queue_job.fields",
        "isExtraImport": true,
        "detail": "odoo.addons.queue_job.fields",
        "documentation": {}
    },
    {
        "label": "TransactionCase",
        "importPath": "odoo.tests.common",
        "description": "odoo.tests.common",
        "isExtraImport": true,
        "detail": "odoo.tests.common",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "odoo.addons.queue_job.jobrunner.runner",
        "description": "odoo.addons.queue_job.jobrunner.runner",
        "isExtraImport": true,
        "detail": "odoo.addons.queue_job.jobrunner.runner",
        "documentation": {}
    },
    {
        "label": "channels",
        "importPath": "odoo.addons.queue_job.jobrunner",
        "description": "odoo.addons.queue_job.jobrunner",
        "isExtraImport": true,
        "detail": "odoo.addons.queue_job.jobrunner",
        "documentation": {}
    },
    {
        "label": "runner",
        "importPath": "odoo.addons.queue_job.jobrunner",
        "description": "odoo.addons.queue_job.jobrunner",
        "isExtraImport": true,
        "detail": "odoo.addons.queue_job.jobrunner",
        "documentation": {}
    },
    {
        "label": "dateutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dateutil",
        "description": "dateutil",
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "lazy",
        "importPath": "odoo.tools.func",
        "description": "odoo.tools.func",
        "isExtraImport": true,
        "detail": "odoo.tools.func",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "TransformacionFactory",
        "importPath": "transformaciones",
        "description": "transformaciones",
        "isExtraImport": true,
        "detail": "transformaciones",
        "documentation": {}
    },
    {
        "label": "ExcelTransformer",
        "importPath": "transformaciones",
        "description": "transformaciones",
        "isExtraImport": true,
        "detail": "transformaciones",
        "documentation": {}
    },
    {
        "label": "leer_json",
        "importPath": "transformaciones",
        "description": "transformaciones",
        "isExtraImport": true,
        "detail": "transformaciones",
        "documentation": {}
    },
    {
        "label": "ProviderWebhookController",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.controllers.webhook",
        "description": "custom-addons.hey_now_integration.controllers.webhook",
        "peekOfCode": "class ProviderWebhookController(http.Controller):\n    @http.route(\n        \"/webhook/chat/<string:provider_name>\", type=\"json\", auth=\"public\", csrf=False\n    )\n    def receive(self, provider_name: str, **kwargs):\n        raw_body = request.httprequest.data\n        data = {}\n        try:\n            # Decodificar JSON\n            data = json.loads(raw_body.decode(\"utf-8\"))",
        "detail": "custom-addons.hey_now_integration.controllers.webhook",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.hey_now_integration.controllers.webhook",
        "description": "custom-addons.hey_now_integration.controllers.webhook",
        "peekOfCode": "_logger = logging.getLogger(__name__)\nclass ProviderWebhookController(http.Controller):\n    @http.route(\n        \"/webhook/chat/<string:provider_name>\", type=\"json\", auth=\"public\", csrf=False\n    )\n    def receive(self, provider_name: str, **kwargs):\n        raw_body = request.httprequest.data\n        data = {}\n        try:\n            # Decodificar JSON",
        "detail": "custom-addons.hey_now_integration.controllers.webhook",
        "documentation": {}
    },
    {
        "label": "MessageEventType",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.payloads.base_event",
        "description": "custom-addons.hey_now_integration.models.payloads.base_event",
        "peekOfCode": "class MessageEventType(Enum):\n    TEXT = \"text\"\n    HTML = \"html\"\n    IMAGE = \"image\"\n    AUDIO = \"audio\"\n    VIDEO = \"video\"\n    DOCUMENT = \"document\"\n    LOCATION = \"location\"\n    CONTACT = \"contact\"\n    STICKER = \"sticker\"",
        "detail": "custom-addons.hey_now_integration.models.payloads.base_event",
        "documentation": {}
    },
    {
        "label": "FileEvent",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.payloads.base_event",
        "description": "custom-addons.hey_now_integration.models.payloads.base_event",
        "peekOfCode": "class FileEvent:\n    \"\"\"Clase para representar archivos que serán convertidos a ir.attachment en Odoo 16\"\"\"\n    # Campos requeridos por Odoo\n    name: str = \"\"  # Nombre del archivo (requerido)\n    datas: str = \"\"  # Contenido del archivo en base64 (requerido)\n    type: str = \"binary\"\n    # Campos opcionales pero recomendados\n    mimetype: Optional[str] = None  # Tipo MIME del archivo\n    # Campos adicionales opcionales\n    description: Optional[str] = None  # Descripción del archivo",
        "detail": "custom-addons.hey_now_integration.models.payloads.base_event",
        "documentation": {}
    },
    {
        "label": "MessageEvent",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.payloads.base_event",
        "description": "custom-addons.hey_now_integration.models.payloads.base_event",
        "peekOfCode": "class MessageEvent:\n    id: str = field(default_factory=lambda: str(uuid4()))\n    message_type: MessageEventType = MessageEventType.TEXT\n    content: str = \"\"\n    files: Optional[List[FileEvent]] = None\n    metadata: Dict[str, Any] = field(default_factory=dict)\n    provider_type: ProviderType = ProviderType.HEYNOW\n    created_at: datetime = field(default_factory=datetime.now)\n    message_id_provider_chat: Optional[str] = None\n@dataclass",
        "detail": "custom-addons.hey_now_integration.models.payloads.base_event",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.payloads.base_event",
        "description": "custom-addons.hey_now_integration.models.payloads.base_event",
        "peekOfCode": "class BaseEvent:\n    user_id: str\n    message: MessageEvent\n    user_name: str\n    channel_name: str\n    channel: str  # Tipo de canal de comunicacion por el cual proviene el mensaje Whatsapp,Instagram,Messeger,etc...\n    is_incoming: bool  # Indica si el mensaje es entrante o saliente cuando sea True es de entrada(de un usurio) y de debe procesar\n    metadata: Dict[str, Any] = field(default_factory=dict)",
        "detail": "custom-addons.hey_now_integration.models.payloads.base_event",
        "documentation": {}
    },
    {
        "label": "WebhookDispatcher",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.payloads.dispatcher",
        "description": "custom-addons.hey_now_integration.models.payloads.dispatcher",
        "peekOfCode": "class WebhookDispatcher:\n    def __init__(self, provider_name: str, raw_payload: dict):\n        self.provider_name = provider_name\n        self.raw_payload = raw_payload\n    def extract_event(self) -> BaseEvent:\n        if self.provider_name == \"heynow\":\n            return HeynowPayload(self.raw_payload).extract()\n        # elif self.provider_name == \"botpress\":\n        #     return BotpressPayload(self.raw_payload).extract()\n        else:",
        "detail": "custom-addons.hey_now_integration.models.payloads.dispatcher",
        "documentation": {}
    },
    {
        "label": "HeynowChannelType",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.payloads.heynow",
        "description": "custom-addons.hey_now_integration.models.payloads.heynow",
        "peekOfCode": "class HeynowChannelType(Enum):\n    WHATSAPP = 1\n    FACEBOOK_MESSENGER = 2\n    TWITTER = 3\n    WEB_CHAT = 4\n    FACEBOOK_WALL = 5\n    WAVY = 6\n    INSTAGRAM = 7\n    MERCADO_LIBRE = 8\n    SINCH = 9",
        "detail": "custom-addons.hey_now_integration.models.payloads.heynow",
        "documentation": {}
    },
    {
        "label": "HeynowPayload",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.payloads.heynow",
        "description": "custom-addons.hey_now_integration.models.payloads.heynow",
        "peekOfCode": "class HeynowPayload:\n    def __init__(self, raw: dict):\n        self.raw = raw\n    def extract(self) -> BaseEvent:\n        event = self.raw.get(\"event\", {})\n        new_data = event.get(\"new\", {})\n        contact = new_data.get(\"__contact\") or self.raw.get(\"data\", {}).get(\n            \"__contact\", {}\n        )\n        key = event.get(\"key\", {})",
        "detail": "custom-addons.hey_now_integration.models.payloads.heynow",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.hey_now_integration.models.payloads.heynow",
        "description": "custom-addons.hey_now_integration.models.payloads.heynow",
        "peekOfCode": "_logger = logging.getLogger(__name__)\nclass HeynowChannelType(Enum):\n    WHATSAPP = 1\n    FACEBOOK_MESSENGER = 2\n    TWITTER = 3\n    WEB_CHAT = 4\n    FACEBOOK_WALL = 5\n    WAVY = 6\n    INSTAGRAM = 7\n    MERCADO_LIBRE = 8",
        "detail": "custom-addons.hey_now_integration.models.payloads.heynow",
        "documentation": {}
    },
    {
        "label": "ChatProviderConfig",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.provider.chat_provider_config",
        "description": "custom-addons.hey_now_integration.models.provider.chat_provider_config",
        "peekOfCode": "class ChatProviderConfig:\n    id: int\n    name: str\n    provider_type: str\n    is_active: bool\n    base_url: str\n    allowed_channel_ids: List[Dict[str, Any]]  # Campo obligatorio\n    auth_token: str = \"\"  # Campo con valor por defecto\n    config_extra: Optional[Dict[str, Any]] = None  # Opcional",
        "detail": "custom-addons.hey_now_integration.models.provider.chat_provider_config",
        "documentation": {}
    },
    {
        "label": "ProviderDispatcher",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.provider.dispatcher",
        "description": "custom-addons.hey_now_integration.models.provider.dispatcher",
        "peekOfCode": "class ProviderDispatcher:\n    def __init__(self, provider_name: str, env):\n        self.provider_name = provider_name\n        self.env = env\n    def get_provider(self) -> Provider:\n        if self.provider_name == ProviderType.HEYNOW.value:\n            return HeynowProvider(self.env)\n        else:\n            raise ValueError(f\"Unsupported provider: {self.provider_name}\")",
        "detail": "custom-addons.hey_now_integration.models.provider.dispatcher",
        "documentation": {}
    },
    {
        "label": "HeynowProvider",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.provider.heynow",
        "description": "custom-addons.hey_now_integration.models.provider.heynow",
        "peekOfCode": "class HeynowProvider(Provider):\n    \"\"\"\n    Heynow provider class.\n    \"\"\"\n    def __init__(self, env):\n        \"\"\"\n        Initialize the HeynowProvider with Odoo environment.\n        :param env: Odoo environment object\n        \"\"\"\n        self.env = env",
        "detail": "custom-addons.hey_now_integration.models.provider.heynow",
        "documentation": {}
    },
    {
        "label": "Provider",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.provider.provider",
        "description": "custom-addons.hey_now_integration.models.provider.provider",
        "peekOfCode": "class Provider(ABC):\n    \"\"\"\n    Abstract base class for all providers.\n    \"\"\"\n    @abstractmethod\n    def get_url(self, config=None) -> str:\n        \"\"\"\n        Get the URL for the provider's API.\n        :param url_base: Base URL from system configuration\n        :param config: Additional configuration data",
        "detail": "custom-addons.hey_now_integration.models.provider.provider",
        "documentation": {}
    },
    {
        "label": "ProviderType",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.provider.provider_type",
        "description": "custom-addons.hey_now_integration.models.provider.provider_type",
        "peekOfCode": "class ProviderType(Enum):\n    \"\"\"\n    Enum representa los diferentes tipos de proveedores de servicios de mensajería.\n    \"\"\"\n    BOTPRESS = \"botpress\"\n    HEYNOW = \"heynow\"\n    TWILIO = \"twilio\"\n    WHATSAPP = \"whatsapp\"\n    TELEGRAM = \"telegram\"\n    FACEBOOK = \"facebook\"",
        "detail": "custom-addons.hey_now_integration.models.provider.provider_type",
        "documentation": {}
    },
    {
        "label": "ChatChannelType",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.chat_channel_type",
        "description": "custom-addons.hey_now_integration.models.chat_channel_type",
        "peekOfCode": "class ChatChannelType(models.Model):\n    _name = \"chat.channel.type\"\n    _description = \"Tipo de Canal\"\n    name = fields.Char(string=\"Nombre del Canal\", required=True)\n    code = fields.Char(\n        string=\"Código\", required=True, help=\"Ej: whatsapp, telegram, etc.\"\n    )\n    active = fields.Boolean(string=\"Activo\", default=True)",
        "detail": "custom-addons.hey_now_integration.models.chat_channel_type",
        "documentation": {}
    },
    {
        "label": "ChatProvider",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.chat_provider",
        "description": "custom-addons.hey_now_integration.models.chat_provider",
        "peekOfCode": "class ChatProvider(models.Model):\n    _name = \"chat.provider\"\n    _description = \"Configuración de Proveedor de Chat\"\n    _order = \"provider_type\"\n    name = fields.Char(\n        string=\"Nombre visible\", required=True, help=\"Nombre del proveedor\"\n    )\n    provider_type = fields.Selection(\n        [\n            (\"heynow\", \"HeyNow\"),",
        "detail": "custom-addons.hey_now_integration.models.chat_provider",
        "documentation": {}
    },
    {
        "label": "MailChannel",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.mail_channel",
        "description": "custom-addons.hey_now_integration.models.mail_channel",
        "peekOfCode": "class MailChannel(models.Model):\n    _inherit = \"mail.channel\"\n    provider_metadata = fields.Json(\"Provider Metadata\")\n    provider_name = fields.Text(\"Nombre del proveedor\")\n    external_channel_id = fields.Text(\"ID del canal externo\")\n    @api.model\n    def message_post(self, **kwargs):\n        \"\"\"Override message_post to send responses to webhook\"\"\"\n        # ✅ VERIFICACIONES PARA EVITAR LOOPS\n        # 1. Si tiene flag para evitar reenvío al proveedor",
        "detail": "custom-addons.hey_now_integration.models.mail_channel",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.hey_now_integration.models.mail_channel",
        "description": "custom-addons.hey_now_integration.models.mail_channel",
        "peekOfCode": "_logger = logging.getLogger(__name__)\nclass MailChannel(models.Model):\n    _inherit = \"mail.channel\"\n    provider_metadata = fields.Json(\"Provider Metadata\")\n    provider_name = fields.Text(\"Nombre del proveedor\")\n    external_channel_id = fields.Text(\"ID del canal externo\")\n    @api.model\n    def message_post(self, **kwargs):\n        \"\"\"Override message_post to send responses to webhook\"\"\"\n        # ✅ VERIFICACIONES PARA EVITAR LOOPS",
        "detail": "custom-addons.hey_now_integration.models.mail_channel",
        "documentation": {}
    },
    {
        "label": "MailMessage",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.mail_message",
        "description": "custom-addons.hey_now_integration.models.mail_message",
        "peekOfCode": "class MailMessage(models.Model):\n    _inherit = \"mail.message\"\n    message_id_provider_chat = fields.Char(\n        string=\"ID del mensaje del proveedor\",\n        index=True,\n        readonly=True,\n        copy=False,\n        # ✅ MANTENER EL UUID - Tu lógica es correcta\n        default=lambda self: str(uuid.uuid4()),\n        help=\"UUID único para tracking de mensajes con proveedores externos\",",
        "detail": "custom-addons.hey_now_integration.models.mail_message",
        "documentation": {}
    },
    {
        "label": "ResConfigSettings",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.res_config_settings",
        "description": "custom-addons.hey_now_integration.models.res_config_settings",
        "peekOfCode": "class ResConfigSettings(models.TransientModel):\n    _inherit = \"res.config.settings\"\n    # OPCIÓN 1: Campo Many2many simple (recomendado)\n    chat_provider_ids = fields.Many2many(\n        \"chat.provider\",\n        string=\"Proveedores de Chat Configurados\",\n        help=\"Selecciona los proveedores de chat que deseas configurar\",\n    )\n    # OPCIÓN 2: Si necesitas mostrar TODOS los proveedores existentes\n    # chat_provider_ids = fields.Many2many(",
        "detail": "custom-addons.hey_now_integration.models.res_config_settings",
        "documentation": {}
    },
    {
        "label": "ResPartner",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.res_partner",
        "description": "custom-addons.hey_now_integration.models.res_partner",
        "peekOfCode": "class ResPartner(models.Model):\n    _inherit = \"res.partner\"\n    provider_user_id = fields.Char(\n        string=\"ID de Usuario del Proveedor\",\n        help=\"ID único del usuario en el proveedor de chat\",\n        index=True,  # Agregar índice para mejorar búsquedas\n    )\n    provider_name = fields.Char(\n        string=\"Nombre del Proveedor\",\n        help=\"Nombre del proveedor de chat\",",
        "detail": "custom-addons.hey_now_integration.models.res_partner",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.hey_now_integration.models.res_partner",
        "description": "custom-addons.hey_now_integration.models.res_partner",
        "peekOfCode": "_logger = logging.getLogger(__name__)\nclass ResPartner(models.Model):\n    _inherit = \"res.partner\"\n    provider_user_id = fields.Char(\n        string=\"ID de Usuario del Proveedor\",\n        help=\"ID único del usuario en el proveedor de chat\",\n        index=True,  # Agregar índice para mejorar búsquedas\n    )\n    provider_name = fields.Char(\n        string=\"Nombre del Proveedor\",",
        "detail": "custom-addons.hey_now_integration.models.res_partner",
        "documentation": {}
    },
    {
        "label": "WebhookProcessor",
        "kind": 6,
        "importPath": "custom-addons.hey_now_integration.models.webhook_processor",
        "description": "custom-addons.hey_now_integration.models.webhook_processor",
        "peekOfCode": "class WebhookProcessor(models.Model):\n    _name = \"webhook.processor\"\n    _description = \"Webhook Event Processor\"\n    name = fields.Char(string=\"Name\", default=\"Webhook Processor\")\n    def process_webhook_event(self, provider_name, webhook_data):\n        \"\"\"\n        Procesar evento de webhook con protección mejorada contra duplicados.\n        \"\"\"\n        _logger.info(\"Processing webhook event for provider: %s\", provider_name)\n        with self.env.cr.savepoint():",
        "detail": "custom-addons.hey_now_integration.models.webhook_processor",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.hey_now_integration.models.webhook_processor",
        "description": "custom-addons.hey_now_integration.models.webhook_processor",
        "peekOfCode": "_logger = logging.getLogger(__name__)\nclass WebhookProcessor(models.Model):\n    _name = \"webhook.processor\"\n    _description = \"Webhook Event Processor\"\n    name = fields.Char(string=\"Name\", default=\"Webhook Processor\")\n    def process_webhook_event(self, provider_name, webhook_data):\n        \"\"\"\n        Procesar evento de webhook con protección mejorada contra duplicados.\n        \"\"\"\n        _logger.info(\"Processing webhook event for provider: %s\", provider_name)",
        "detail": "custom-addons.hey_now_integration.models.webhook_processor",
        "documentation": {}
    },
    {
        "label": "Transformacion",
        "kind": 6,
        "importPath": "custom-addons.medio.models.excel_to_txt",
        "description": "custom-addons.medio.models.excel_to_txt",
        "peekOfCode": "class Transformacion(ABC):\n    @abstractmethod\n    def transformar(self, df, columna_nombre, regla):\n        pass\nclass TransformacionAnio(Transformacion):\n    def transformar(self, df, columna_nombre, regla):\n        if columna_nombre in df.columns:\n            try:\n                df[columna_nombre] = (\n                    df[columna_nombre]",
        "detail": "custom-addons.medio.models.excel_to_txt",
        "documentation": {}
    },
    {
        "label": "TransformacionAnio",
        "kind": 6,
        "importPath": "custom-addons.medio.models.excel_to_txt",
        "description": "custom-addons.medio.models.excel_to_txt",
        "peekOfCode": "class TransformacionAnio(Transformacion):\n    def transformar(self, df, columna_nombre, regla):\n        if columna_nombre in df.columns:\n            try:\n                df[columna_nombre] = (\n                    df[columna_nombre]\n                    .astype(int)\n                    .astype(str)\n                    .str.zfill(regla[\"TAMANO\"])\n                )",
        "detail": "custom-addons.medio.models.excel_to_txt",
        "documentation": {}
    },
    {
        "label": "TransformacionConcepto",
        "kind": 6,
        "importPath": "custom-addons.medio.models.excel_to_txt",
        "description": "custom-addons.medio.models.excel_to_txt",
        "peekOfCode": "class TransformacionConcepto(Transformacion):\n    def transformar(self, df, columna_nombre, regla):\n        if columna_nombre in df.columns:\n            df[columna_nombre] = (\n                df[columna_nombre]\n                .astype(str)\n                .str[: regla[\"TAMANO\"]]\n                .str.ljust(regla[\"TAMANO\"], \"$\")\n            )\n        return df",
        "detail": "custom-addons.medio.models.excel_to_txt",
        "documentation": {}
    },
    {
        "label": "TransformacionValor",
        "kind": 6,
        "importPath": "custom-addons.medio.models.excel_to_txt",
        "description": "custom-addons.medio.models.excel_to_txt",
        "peekOfCode": "class TransformacionValor(Transformacion):\n    def transformar(self, df, columna_nombre, regla):\n        if columna_nombre in df.columns:\n            try:\n                if pd.isna(df[columna_nombre]).any():\n                    df[columna_nombre] = df[columna_nombre].replace(np.nan, \"\")\n                df[columna_nombre] = (\n                    df[columna_nombre]\n                    .astype(int)\n                    .astype(str)",
        "detail": "custom-addons.medio.models.excel_to_txt",
        "documentation": {}
    },
    {
        "label": "TransformacionFactory",
        "kind": 6,
        "importPath": "custom-addons.medio.models.excel_to_txt",
        "description": "custom-addons.medio.models.excel_to_txt",
        "peekOfCode": "class TransformacionFactory:\n    def crear_transformacion(self, nombre_columna):\n        if nombre_columna == \"ANIO\":\n            return TransformacionAnio()\n        elif nombre_columna == \"CONCEPTO\":\n            return TransformacionConcepto()\n        elif nombre_columna == \"VALOR\":\n            return TransformacionValor()\n        else:\n            raise ValueError(f\"Tipo de transformación desconocido: {nombre_columna}\")",
        "detail": "custom-addons.medio.models.excel_to_txt",
        "documentation": {}
    },
    {
        "label": "ExcelTransformer",
        "kind": 6,
        "importPath": "custom-addons.medio.models.excel_to_txt",
        "description": "custom-addons.medio.models.excel_to_txt",
        "peekOfCode": "class ExcelTransformer:\n    def __init__(\n        self,\n        reglas: List[dict],\n        transformacion_factory: TransformacionFactory,\n        columnas_a_transformar: Optional[List[str]] = None,\n    ):\n        self.reglas = reglas\n        self.transformacion_factory = transformacion_factory\n        self.columnas_a_transformar = (",
        "detail": "custom-addons.medio.models.excel_to_txt",
        "documentation": {}
    },
    {
        "label": "MedioExcelToTxt",
        "kind": 6,
        "importPath": "custom-addons.medio.models.excel_to_txt",
        "description": "custom-addons.medio.models.excel_to_txt",
        "peekOfCode": "class MedioExcelToTxt(models.TransientModel):\n    _name = \"medio.excel_to_txt\"\n    _description = \"Wizard to Convert Excel to TXT\"\n    excel_file = fields.Binary(string=\"Archivo Excel\", required=True)\n    excel_filename = fields.Char(string=\"Nombre del Archivo Excel\")\n    txt_file = fields.Binary(string=\"Archivo TXT\", readonly=True)\n    txt_filename = fields.Char(string=\"Nombre del Archivo TXT\", readonly=True)\n    def _get_reglas_path(self):\n        \"\"\"Devuelve la ruta absoluta al archivo de reglas JSON.\"\"\"\n        return os.path.join(",
        "detail": "custom-addons.medio.models.excel_to_txt",
        "documentation": {}
    },
    {
        "label": "RunJobController",
        "kind": 6,
        "importPath": "custom-addons.queue_job.controllers.main",
        "description": "custom-addons.queue_job.controllers.main",
        "peekOfCode": "class RunJobController(http.Controller):\n    def _try_perform_job(self, env, job):\n        \"\"\"Try to perform the job.\"\"\"\n        job.set_started()\n        job.store()\n        env.cr.commit()\n        job.lock()\n        _logger.debug(\"%s started\", job)\n        job.perform()\n        # Triggers any stored computed fields before calling 'set_done'",
        "detail": "custom-addons.queue_job.controllers.main",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.queue_job.controllers.main",
        "description": "custom-addons.queue_job.controllers.main",
        "peekOfCode": "_logger = logging.getLogger(__name__)\nPG_RETRY = 5  # seconds\nDEPENDS_MAX_TRIES_ON_CONCURRENCY_FAILURE = 5\nclass RunJobController(http.Controller):\n    def _try_perform_job(self, env, job):\n        \"\"\"Try to perform the job.\"\"\"\n        job.set_started()\n        job.store()\n        env.cr.commit()\n        job.lock()",
        "detail": "custom-addons.queue_job.controllers.main",
        "documentation": {}
    },
    {
        "label": "PG_RETRY",
        "kind": 5,
        "importPath": "custom-addons.queue_job.controllers.main",
        "description": "custom-addons.queue_job.controllers.main",
        "peekOfCode": "PG_RETRY = 5  # seconds\nDEPENDS_MAX_TRIES_ON_CONCURRENCY_FAILURE = 5\nclass RunJobController(http.Controller):\n    def _try_perform_job(self, env, job):\n        \"\"\"Try to perform the job.\"\"\"\n        job.set_started()\n        job.store()\n        env.cr.commit()\n        job.lock()\n        _logger.debug(\"%s started\", job)",
        "detail": "custom-addons.queue_job.controllers.main",
        "documentation": {}
    },
    {
        "label": "DEPENDS_MAX_TRIES_ON_CONCURRENCY_FAILURE",
        "kind": 5,
        "importPath": "custom-addons.queue_job.controllers.main",
        "description": "custom-addons.queue_job.controllers.main",
        "peekOfCode": "DEPENDS_MAX_TRIES_ON_CONCURRENCY_FAILURE = 5\nclass RunJobController(http.Controller):\n    def _try_perform_job(self, env, job):\n        \"\"\"Try to perform the job.\"\"\"\n        job.set_started()\n        job.store()\n        env.cr.commit()\n        job.lock()\n        _logger.debug(\"%s started\", job)\n        job.perform()",
        "detail": "custom-addons.queue_job.controllers.main",
        "documentation": {}
    },
    {
        "label": "PriorityQueue",
        "kind": 6,
        "importPath": "custom-addons.queue_job.jobrunner.channels",
        "description": "custom-addons.queue_job.jobrunner.channels",
        "peekOfCode": "class PriorityQueue:\n    \"\"\"A priority queue that supports removing arbitrary objects.\n    Adding an object already in the queue is a no op.\n    Popping an empty queue returns None.\n    >>> q = PriorityQueue()\n    >>> q.add(2)\n    >>> q.add(3)\n    >>> q.add(3)\n    >>> q.add(1)\n    >>> q[0]",
        "detail": "custom-addons.queue_job.jobrunner.channels",
        "documentation": {}
    },
    {
        "label": "ChannelJob",
        "kind": 6,
        "importPath": "custom-addons.queue_job.jobrunner.channels",
        "description": "custom-addons.queue_job.jobrunner.channels",
        "peekOfCode": "class ChannelJob:\n    \"\"\"A channel job is attached to a channel and holds the properties of a\n    job that are necessary to prioritise them.\n    Channel jobs are comparable according to the following rules:\n        * jobs with an eta come before all other jobs\n        * then jobs with a smaller eta come first\n        * then jobs with a smaller priority come first\n        * then jobs with a smaller creation time come first\n        * then jobs with a smaller sequence come first\n    Here are some examples.",
        "detail": "custom-addons.queue_job.jobrunner.channels",
        "documentation": {}
    },
    {
        "label": "ChannelQueue",
        "kind": 6,
        "importPath": "custom-addons.queue_job.jobrunner.channels",
        "description": "custom-addons.queue_job.jobrunner.channels",
        "peekOfCode": "class ChannelQueue:\n    \"\"\"A channel queue is a priority queue for jobs.\n    Jobs with an eta are set aside until their eta is past due, at\n    which point they start competing normally with other jobs.\n    >>> q = ChannelQueue()\n    >>> j1 = ChannelJob(None, None, 1,\n    ...                 seq=0, date_created=1, priority=1, eta=10)\n    >>> j2 = ChannelJob(None, None, 2,\n    ...                 seq=0, date_created=2, priority=1, eta=None)\n    >>> j3 = ChannelJob(None, None, 3,",
        "detail": "custom-addons.queue_job.jobrunner.channels",
        "documentation": {}
    },
    {
        "label": "Channel",
        "kind": 6,
        "importPath": "custom-addons.queue_job.jobrunner.channels",
        "description": "custom-addons.queue_job.jobrunner.channels",
        "peekOfCode": "class Channel:\n    \"\"\"A channel for jobs, with a maximum capacity.\n    When jobs are created by queue_job modules, they may be associated\n    to a job channel. Jobs with no channel are inserted into the root channel.\n    Job channels are joined in a hierarchy down to the root channel.\n    When a job channel has available capacity, jobs are dequeued, marked\n    as running in the channel and are inserted into the queue of the\n    parent channel where they wait for available capacity and so on.\n    Job channels can be visualized as water channels with a given flow\n    limit (= capacity). Channels are joined together in a downstream channel",
        "detail": "custom-addons.queue_job.jobrunner.channels",
        "documentation": {}
    },
    {
        "label": "ChannelManager",
        "kind": 6,
        "importPath": "custom-addons.queue_job.jobrunner.channels",
        "description": "custom-addons.queue_job.jobrunner.channels",
        "peekOfCode": "class ChannelManager:\n    \"\"\"High level interface for channels\n    This class handles:\n    * configuration of channels\n    * high level api to create and remove jobs (notify, remove_job, remove_db)\n    * get jobs to run\n    Here is how the runner will use it.\n    Let's create a channel manager and configure it.\n    >>> from pprint import pprint as pp\n    >>> cm = ChannelManager()",
        "detail": "custom-addons.queue_job.jobrunner.channels",
        "documentation": {}
    },
    {
        "label": "split_strip",
        "kind": 2,
        "importPath": "custom-addons.queue_job.jobrunner.channels",
        "description": "custom-addons.queue_job.jobrunner.channels",
        "peekOfCode": "def split_strip(s, sep, maxsplit=-1):\n    \"\"\"Split string and strip each component.\n    >>> split_strip(\"foo: bar baz\\\\n: fred:\", \":\")\n    ['foo', 'bar baz', 'fred', '']\n    \"\"\"\n    return [x.strip() for x in s.split(sep, maxsplit)]\nclass ChannelManager:\n    \"\"\"High level interface for channels\n    This class handles:\n    * configuration of channels",
        "detail": "custom-addons.queue_job.jobrunner.channels",
        "documentation": {}
    },
    {
        "label": "NOT_DONE",
        "kind": 5,
        "importPath": "custom-addons.queue_job.jobrunner.channels",
        "description": "custom-addons.queue_job.jobrunner.channels",
        "peekOfCode": "NOT_DONE = (WAIT_DEPENDENCIES, PENDING, ENQUEUED, STARTED, FAILED)\n_logger = logging.getLogger(__name__)\nclass PriorityQueue:\n    \"\"\"A priority queue that supports removing arbitrary objects.\n    Adding an object already in the queue is a no op.\n    Popping an empty queue returns None.\n    >>> q = PriorityQueue()\n    >>> q.add(2)\n    >>> q.add(3)\n    >>> q.add(3)",
        "detail": "custom-addons.queue_job.jobrunner.channels",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.queue_job.jobrunner.channels",
        "description": "custom-addons.queue_job.jobrunner.channels",
        "peekOfCode": "_logger = logging.getLogger(__name__)\nclass PriorityQueue:\n    \"\"\"A priority queue that supports removing arbitrary objects.\n    Adding an object already in the queue is a no op.\n    Popping an empty queue returns None.\n    >>> q = PriorityQueue()\n    >>> q.add(2)\n    >>> q.add(3)\n    >>> q.add(3)\n    >>> q.add(1)",
        "detail": "custom-addons.queue_job.jobrunner.channels",
        "documentation": {}
    },
    {
        "label": "MasterElectionLost",
        "kind": 6,
        "importPath": "custom-addons.queue_job.jobrunner.runner",
        "description": "custom-addons.queue_job.jobrunner.runner",
        "peekOfCode": "class MasterElectionLost(Exception):\n    pass\n# Unfortunately, it is not possible to extend the Odoo\n# server command line arguments, so we resort to environment variables\n# to configure the runner (channels mostly).\n#\n# On the other hand, the odoo configuration file can be extended at will,\n# so we check it in addition to the environment variables.\ndef _channels():\n    return (",
        "detail": "custom-addons.queue_job.jobrunner.runner",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "custom-addons.queue_job.jobrunner.runner",
        "description": "custom-addons.queue_job.jobrunner.runner",
        "peekOfCode": "class Database:\n    def __init__(self, db_name):\n        self.db_name = db_name\n        connection_info = _connection_info_for(db_name)\n        self.conn = psycopg2.connect(**connection_info)\n        try:\n            self.conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)\n            self.has_queue_job = self._has_queue_job()\n            if self.has_queue_job:\n                self._acquire_master_lock()",
        "detail": "custom-addons.queue_job.jobrunner.runner",
        "documentation": {}
    },
    {
        "label": "QueueJobRunner",
        "kind": 6,
        "importPath": "custom-addons.queue_job.jobrunner.runner",
        "description": "custom-addons.queue_job.jobrunner.runner",
        "peekOfCode": "class QueueJobRunner:\n    def __init__(\n        self,\n        scheme=\"http\",\n        host=\"localhost\",\n        port=8069,\n        user=None,\n        password=None,\n        channel_config_string=None,\n    ):",
        "detail": "custom-addons.queue_job.jobrunner.runner",
        "documentation": {}
    },
    {
        "label": "SELECT_TIMEOUT",
        "kind": 5,
        "importPath": "custom-addons.queue_job.jobrunner.runner",
        "description": "custom-addons.queue_job.jobrunner.runner",
        "peekOfCode": "SELECT_TIMEOUT = 60\nERROR_RECOVERY_DELAY = 5\nPG_ADVISORY_LOCK_ID = 2293787760715711918\n_logger = logging.getLogger(__name__)\nselect = selectors.DefaultSelector\nclass MasterElectionLost(Exception):\n    pass\n# Unfortunately, it is not possible to extend the Odoo\n# server command line arguments, so we resort to environment variables\n# to configure the runner (channels mostly).",
        "detail": "custom-addons.queue_job.jobrunner.runner",
        "documentation": {}
    },
    {
        "label": "ERROR_RECOVERY_DELAY",
        "kind": 5,
        "importPath": "custom-addons.queue_job.jobrunner.runner",
        "description": "custom-addons.queue_job.jobrunner.runner",
        "peekOfCode": "ERROR_RECOVERY_DELAY = 5\nPG_ADVISORY_LOCK_ID = 2293787760715711918\n_logger = logging.getLogger(__name__)\nselect = selectors.DefaultSelector\nclass MasterElectionLost(Exception):\n    pass\n# Unfortunately, it is not possible to extend the Odoo\n# server command line arguments, so we resort to environment variables\n# to configure the runner (channels mostly).\n#",
        "detail": "custom-addons.queue_job.jobrunner.runner",
        "documentation": {}
    },
    {
        "label": "PG_ADVISORY_LOCK_ID",
        "kind": 5,
        "importPath": "custom-addons.queue_job.jobrunner.runner",
        "description": "custom-addons.queue_job.jobrunner.runner",
        "peekOfCode": "PG_ADVISORY_LOCK_ID = 2293787760715711918\n_logger = logging.getLogger(__name__)\nselect = selectors.DefaultSelector\nclass MasterElectionLost(Exception):\n    pass\n# Unfortunately, it is not possible to extend the Odoo\n# server command line arguments, so we resort to environment variables\n# to configure the runner (channels mostly).\n#\n# On the other hand, the odoo configuration file can be extended at will,",
        "detail": "custom-addons.queue_job.jobrunner.runner",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.queue_job.jobrunner.runner",
        "description": "custom-addons.queue_job.jobrunner.runner",
        "peekOfCode": "_logger = logging.getLogger(__name__)\nselect = selectors.DefaultSelector\nclass MasterElectionLost(Exception):\n    pass\n# Unfortunately, it is not possible to extend the Odoo\n# server command line arguments, so we resort to environment variables\n# to configure the runner (channels mostly).\n#\n# On the other hand, the odoo configuration file can be extended at will,\n# so we check it in addition to the environment variables.",
        "detail": "custom-addons.queue_job.jobrunner.runner",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 5,
        "importPath": "custom-addons.queue_job.jobrunner.runner",
        "description": "custom-addons.queue_job.jobrunner.runner",
        "peekOfCode": "select = selectors.DefaultSelector\nclass MasterElectionLost(Exception):\n    pass\n# Unfortunately, it is not possible to extend the Odoo\n# server command line arguments, so we resort to environment variables\n# to configure the runner (channels mostly).\n#\n# On the other hand, the odoo configuration file can be extended at will,\n# so we check it in addition to the environment variables.\ndef _channels():",
        "detail": "custom-addons.queue_job.jobrunner.runner",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "custom-addons.queue_job.migrations.15.0.1.1.0.post-migration",
        "description": "custom-addons.queue_job.migrations.15.0.1.1.0.post-migration",
        "peekOfCode": "def migrate(cr, version):\n    with api.Environment.manage():\n        env = api.Environment(cr, SUPERUSER_ID, {})\n        _logger.info(\"Computing exception name for failed jobs\")\n        _compute_jobs_new_values(env)\ndef _compute_jobs_new_values(env):\n    for job in env[\"queue.job\"].search(\n        [(\"state\", \"=\", \"failed\"), (\"exc_info\", \"!=\", False)]\n    ):\n        exception_details = _get_exception_details(job)",
        "detail": "custom-addons.queue_job.migrations.15.0.1.1.0.post-migration",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.queue_job.migrations.15.0.1.1.0.post-migration",
        "description": "custom-addons.queue_job.migrations.15.0.1.1.0.post-migration",
        "peekOfCode": "_logger = logging.getLogger(__name__)\ndef migrate(cr, version):\n    with api.Environment.manage():\n        env = api.Environment(cr, SUPERUSER_ID, {})\n        _logger.info(\"Computing exception name for failed jobs\")\n        _compute_jobs_new_values(env)\ndef _compute_jobs_new_values(env):\n    for job in env[\"queue.job\"].search(\n        [(\"state\", \"=\", \"failed\"), (\"exc_info\", \"!=\", False)]\n    ):",
        "detail": "custom-addons.queue_job.migrations.15.0.1.1.0.post-migration",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "custom-addons.queue_job.migrations.15.0.1.1.0.pre-migration",
        "description": "custom-addons.queue_job.migrations.15.0.1.1.0.pre-migration",
        "peekOfCode": "def migrate(cr, version):\n    if table_exists(cr, \"queue_job\") and not column_exists(\n        cr, \"queue_job\", \"exec_time\"\n    ):\n        # Disable trigger otherwise the update takes ages.\n        cr.execute(\n            \"\"\"\n            ALTER TABLE queue_job DISABLE TRIGGER queue_job_notify;\n        \"\"\"\n        )",
        "detail": "custom-addons.queue_job.migrations.15.0.1.1.0.pre-migration",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "custom-addons.queue_job.migrations.16.0.2.11.1.pre-migration",
        "description": "custom-addons.queue_job.migrations.16.0.2.11.1.pre-migration",
        "peekOfCode": "def migrate(env, version):\n    # Remove cron garbage collector\n    openupgrade.delete_records_safely_by_xml_id(\n        env,\n        [\"queue_job.ir_cron_queue_job_garbage_collector\"],\n    )",
        "detail": "custom-addons.queue_job.migrations.16.0.2.11.1.pre-migration",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "custom-addons.queue_job.migrations.16.0.2.6.1.pre-migration",
        "description": "custom-addons.queue_job.migrations.16.0.2.6.1.pre-migration",
        "peekOfCode": "def migrate(cr, version):\n    if table_exists(cr, \"queue_job\"):\n        # Drop index 'queue_job_identity_key_state_partial_index',\n        # it will be recreated during the update\n        cr.execute(\"DROP INDEX IF EXISTS queue_job_identity_key_state_partial_index;\")",
        "detail": "custom-addons.queue_job.migrations.16.0.2.6.1.pre-migration",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "custom-addons.queue_job.models.base",
        "description": "custom-addons.queue_job.models.base",
        "peekOfCode": "class Base(models.AbstractModel):\n    \"\"\"The base model, which is implicitly inherited by all models.\n    A new :meth:`~with_delay` method is added on all Odoo Models, allowing to\n    postpone the execution of a job method in an asynchronous process.\n    \"\"\"\n    _inherit = \"base\"\n    def with_delay(\n        self,\n        priority=None,\n        eta=None,",
        "detail": "custom-addons.queue_job.models.base",
        "documentation": {}
    },
    {
        "label": "IrModelFields",
        "kind": 6,
        "importPath": "custom-addons.queue_job.models.ir_model_fields",
        "description": "custom-addons.queue_job.models.ir_model_fields",
        "peekOfCode": "class IrModelFields(models.Model):\n    _inherit = \"ir.model.fields\"\n    ttype = fields.Selection(\n        selection_add=[(\"job_serialized\", \"Job Serialized\")],\n        ondelete={\"job_serialized\": \"cascade\"},\n    )",
        "detail": "custom-addons.queue_job.models.ir_model_fields",
        "documentation": {}
    },
    {
        "label": "QueueJob",
        "kind": 6,
        "importPath": "custom-addons.queue_job.models.queue_job",
        "description": "custom-addons.queue_job.models.queue_job",
        "peekOfCode": "class QueueJob(models.Model):\n    \"\"\"Model storing the jobs to be executed.\"\"\"\n    _name = \"queue.job\"\n    _description = \"Queue Job\"\n    _inherit = [\"mail.thread\", \"mail.activity.mixin\"]\n    _log_access = False\n    _order = \"date_created DESC, date_done DESC\"\n    _removal_interval = 30  # days\n    _default_related_action = \"related_action_open_record\"\n    # This must be passed in a context key \"_job_edit_sentinel\" to write on",
        "detail": "custom-addons.queue_job.models.queue_job",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.queue_job.models.queue_job",
        "description": "custom-addons.queue_job.models.queue_job",
        "peekOfCode": "_logger = logging.getLogger(__name__)\nclass QueueJob(models.Model):\n    \"\"\"Model storing the jobs to be executed.\"\"\"\n    _name = \"queue.job\"\n    _description = \"Queue Job\"\n    _inherit = [\"mail.thread\", \"mail.activity.mixin\"]\n    _log_access = False\n    _order = \"date_created DESC, date_done DESC\"\n    _removal_interval = 30  # days\n    _default_related_action = \"related_action_open_record\"",
        "detail": "custom-addons.queue_job.models.queue_job",
        "documentation": {}
    },
    {
        "label": "QueueJobChannel",
        "kind": 6,
        "importPath": "custom-addons.queue_job.models.queue_job_channel",
        "description": "custom-addons.queue_job.models.queue_job_channel",
        "peekOfCode": "class QueueJobChannel(models.Model):\n    _name = \"queue.job.channel\"\n    _description = \"Job Channels\"\n    name = fields.Char()\n    complete_name = fields.Char(\n        compute=\"_compute_complete_name\", store=True, readonly=True, recursive=True\n    )\n    parent_id = fields.Many2one(\n        comodel_name=\"queue.job.channel\", string=\"Parent Channel\", ondelete=\"restrict\"\n    )",
        "detail": "custom-addons.queue_job.models.queue_job_channel",
        "documentation": {}
    },
    {
        "label": "QueueJobFunction",
        "kind": 6,
        "importPath": "custom-addons.queue_job.models.queue_job_function",
        "description": "custom-addons.queue_job.models.queue_job_function",
        "peekOfCode": "class QueueJobFunction(models.Model):\n    _name = \"queue.job.function\"\n    _description = \"Job Functions\"\n    _log_access = False\n    JobConfig = namedtuple(\n        \"JobConfig\",\n        \"channel \"\n        \"retry_pattern \"\n        \"related_action_enable \"\n        \"related_action_func_name \"",
        "detail": "custom-addons.queue_job.models.queue_job_function",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.queue_job.models.queue_job_function",
        "description": "custom-addons.queue_job.models.queue_job_function",
        "peekOfCode": "_logger = logging.getLogger(__name__)\nregex_job_function_name = re.compile(r\"^<([0-9a-z_\\.]+)>\\.([0-9a-zA-Z_]+)$\")\nclass QueueJobFunction(models.Model):\n    _name = \"queue.job.function\"\n    _description = \"Job Functions\"\n    _log_access = False\n    JobConfig = namedtuple(\n        \"JobConfig\",\n        \"channel \"\n        \"retry_pattern \"",
        "detail": "custom-addons.queue_job.models.queue_job_function",
        "documentation": {}
    },
    {
        "label": "regex_job_function_name",
        "kind": 5,
        "importPath": "custom-addons.queue_job.models.queue_job_function",
        "description": "custom-addons.queue_job.models.queue_job_function",
        "peekOfCode": "regex_job_function_name = re.compile(r\"^<([0-9a-z_\\.]+)>\\.([0-9a-zA-Z_]+)$\")\nclass QueueJobFunction(models.Model):\n    _name = \"queue.job.function\"\n    _description = \"Job Functions\"\n    _log_access = False\n    JobConfig = namedtuple(\n        \"JobConfig\",\n        \"channel \"\n        \"retry_pattern \"\n        \"related_action_enable \"",
        "detail": "custom-addons.queue_job.models.queue_job_function",
        "documentation": {}
    },
    {
        "label": "QueueJobLock",
        "kind": 6,
        "importPath": "custom-addons.queue_job.models.queue_job_lock",
        "description": "custom-addons.queue_job.models.queue_job_lock",
        "peekOfCode": "class QueueJobLock(models.Model):\n    _name = \"queue.job.lock\"\n    _description = \"Queue Job Lock\"\n    queue_job_id = fields.Many2one(\n        comodel_name=\"queue.job\",\n        required=True,\n        ondelete=\"cascade\",\n        index=True,\n    )",
        "detail": "custom-addons.queue_job.models.queue_job_lock",
        "documentation": {}
    },
    {
        "label": "JobCall",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.common",
        "description": "custom-addons.queue_job.tests.common",
        "peekOfCode": "class JobCall(typing.NamedTuple):\n    method: typing.Callable\n    args: tuple\n    kwargs: dict\n    properties: dict\n    def __eq__(self, other):\n        if not isinstance(other, JobCall):\n            return NotImplemented\n        return (\n            self.method.__self__ == other.method.__self__",
        "detail": "custom-addons.queue_job.tests.common",
        "documentation": {}
    },
    {
        "label": "JobsTrap",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.common",
        "description": "custom-addons.queue_job.tests.common",
        "peekOfCode": "class JobsTrap:\n    \"\"\"Used by ``trap_jobs()``, provide assert methods on the trapped jobs\n    Look the documentation of ``trap_jobs()`` for a usage example.\n    The ``store`` method of the Job instances is mocked so they are never\n    saved in database.\n    Helpers for tests:\n    * ``jobs_count``\n    * ``assert_jobs_count``\n    * ``assert_enqueued_job``\n    * ``perform_enqueued_jobs``",
        "detail": "custom-addons.queue_job.tests.common",
        "documentation": {}
    },
    {
        "label": "JobCounter",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.common",
        "description": "custom-addons.queue_job.tests.common",
        "peekOfCode": "class JobCounter:\n    def __init__(self, env):\n        super().__init__()\n        self.env = env\n        self.existing = self.search_all()\n    def count_all(self):\n        return len(self.search_all())\n    def count_created(self):\n        return len(self.search_created())\n    def count_existing(self):",
        "detail": "custom-addons.queue_job.tests.common",
        "documentation": {}
    },
    {
        "label": "JobMixin",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.common",
        "description": "custom-addons.queue_job.tests.common",
        "peekOfCode": "class JobMixin:\n    def job_counter(self):\n        return JobCounter(self.env)\n    def perform_jobs(self, jobs):\n        for job in jobs.search_created():\n            Job.load(self.env, job.uuid).perform()\n    @contextmanager\n    def trap_jobs(self):\n        with trap_jobs() as trap:\n            yield trap",
        "detail": "custom-addons.queue_job.tests.common",
        "documentation": {}
    },
    {
        "label": "OdooDocTestCase",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.common",
        "description": "custom-addons.queue_job.tests.common",
        "peekOfCode": "class OdooDocTestCase(doctest.DocTestCase):\n    \"\"\"\n    We need a custom DocTestCase class in order to:\n    - define test_tags to run as part of standard tests\n    - output a more meaningful test name than default \"DocTestCase.runTest\"\n    \"\"\"\n    def __init__(\n        self, doctest, optionflags=0, setUp=None, tearDown=None, checker=None, seq=0\n    ):\n        super().__init__(",
        "detail": "custom-addons.queue_job.tests.common",
        "documentation": {}
    },
    {
        "label": "trap_jobs",
        "kind": 2,
        "importPath": "custom-addons.queue_job.tests.common",
        "description": "custom-addons.queue_job.tests.common",
        "peekOfCode": "def trap_jobs():\n    \"\"\"Context Manager used to test enqueuing of jobs\n    Trapping jobs allows to split the tests in:\n    * the part that delays the job with the expected arguments in one test\n    * the execution of the job itself in a second test\n    When the jobs are trapped, they are not executed at all, however, we\n    can verify they have been enqueued with the correct arguments and\n    properties.\n    Then in a second test, we can call the job method directly with the\n    arguments to test.",
        "detail": "custom-addons.queue_job.tests.common",
        "documentation": {}
    },
    {
        "label": "mock_with_delay",
        "kind": 2,
        "importPath": "custom-addons.queue_job.tests.common",
        "description": "custom-addons.queue_job.tests.common",
        "peekOfCode": "def mock_with_delay():\n    \"\"\"Context Manager mocking ``with_delay()``\n    DEPRECATED: use ``trap_jobs()'``.\n    Mocking this method means we can decorrelate the tests in:\n    * the part that delay the job with the expected arguments\n    * the execution of the job itself\n    The first kind of test does not need to actually create the jobs in the\n    database, as we can inspect how the Mocks were called.\n    The second kind of test calls directly the method decorated by ``@job``\n    with the arguments that we want to test.",
        "detail": "custom-addons.queue_job.tests.common",
        "documentation": {}
    },
    {
        "label": "load_doctests",
        "kind": 2,
        "importPath": "custom-addons.queue_job.tests.common",
        "description": "custom-addons.queue_job.tests.common",
        "peekOfCode": "def load_doctests(module):\n    \"\"\"\n    Generates a tests loading method for the doctests of the given module\n    https://docs.python.org/3/library/unittest.html#load-tests-protocol\n    \"\"\"\n    def load_tests(loader, tests, ignore):\n        \"\"\"\n        Apply the 'test_tags' attribute to each DocTestCase found by the DocTestSuite.\n        Also extend the DocTestCase class trivially to fit the class teardown\n        that Odoo backported for its own test classes from Python 3.8.",
        "detail": "custom-addons.queue_job.tests.common",
        "documentation": {}
    },
    {
        "label": "TestDelayable",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.test_delayable",
        "description": "custom-addons.queue_job.tests.test_delayable",
        "peekOfCode": "class TestDelayable(common.BaseCase):\n    def setUp(self):\n        super().setUp()\n        self.recordset = mock.MagicMock(name=\"recordset\")\n    def test_delayable_set(self):\n        # Use gc for garbage collection and use assertLogs to suppress WARNING\n        with self.assertLogs(\"odoo.addons.queue_job.delay\", level=logging.WARNING):\n            dl = Delayable(self.recordset)\n            dl.set(priority=15)\n            self.assertEqual(dl.priority, 15)",
        "detail": "custom-addons.queue_job.tests.test_delayable",
        "documentation": {}
    },
    {
        "label": "TestDelayableSplit",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.test_delayable_split",
        "description": "custom-addons.queue_job.tests.test_delayable_split",
        "peekOfCode": "class TestDelayableSplit(common.BaseCase):\n    def setUp(self):\n        super().setUp()\n        class FakeRecordSet(list):\n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n                self._name = \"recordset\"\n            def __getitem__(self, key):\n                if isinstance(key, slice):\n                    return FakeRecordSet(super().__getitem__(key))",
        "detail": "custom-addons.queue_job.tests.test_delayable_split",
        "documentation": {}
    },
    {
        "label": "TestJson",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.test_json_field",
        "description": "custom-addons.queue_job.tests.test_json_field",
        "peekOfCode": "class TestJson(common.TransactionCase):\n    def test_encoder_recordset(self):\n        demo_user = self.env.ref(\"base.user_demo\")\n        context = demo_user.context_get()\n        partner = self.env(user=demo_user, context=context).ref(\"base.main_partner\")\n        value = partner\n        value_json = json.dumps(value, cls=JobEncoder)\n        expected_context = context.copy()\n        expected_context.pop(\"uid\")\n        expected = {",
        "detail": "custom-addons.queue_job.tests.test_json_field",
        "documentation": {}
    },
    {
        "label": "TestJobChannel",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.test_model_job_channel",
        "description": "custom-addons.queue_job.tests.test_model_job_channel",
        "peekOfCode": "class TestJobChannel(common.TransactionCase):\n    def setUp(self):\n        super().setUp()\n        self.Channel = self.env[\"queue.job.channel\"]\n        self.root_channel = self.Channel.search([(\"name\", \"=\", \"root\")])\n    def test_channel_new(self):\n        channel = self.Channel.new()\n        self.assertFalse(channel.name)\n        self.assertFalse(channel.complete_name)\n    def test_channel_create(self):",
        "detail": "custom-addons.queue_job.tests.test_model_job_channel",
        "documentation": {}
    },
    {
        "label": "TestJobFunction",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.test_model_job_function",
        "description": "custom-addons.queue_job.tests.test_model_job_function",
        "peekOfCode": "class TestJobFunction(common.TransactionCase):\n    def test_function_name_compute(self):\n        function = self.env[\"queue.job.function\"].create(\n            {\"model_id\": self.env.ref(\"base.model_res_users\").id, \"method\": \"read\"}\n        )\n        self.assertEqual(function.name, \"<res.users>.read\")\n    def test_function_name_inverse(self):\n        function = self.env[\"queue.job.function\"].create({\"name\": \"<res.users>.read\"})\n        self.assertEqual(function.model_id.model, \"res.users\")\n        self.assertEqual(function.method, \"read\")",
        "detail": "custom-addons.queue_job.tests.test_model_job_function",
        "documentation": {}
    },
    {
        "label": "TestJobWriteProtected",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.test_queue_job_protected_write",
        "description": "custom-addons.queue_job.tests.test_queue_job_protected_write",
        "peekOfCode": "class TestJobWriteProtected(common.TransactionCase):\n    def test_create_error(self):\n        with self.assertRaises(exceptions.AccessError):\n            self.env[\"queue.job\"].create(\n                {\"uuid\": \"test\", \"model_name\": \"res.partner\", \"method_name\": \"write\"}\n            )\n    def test_write_protected_field_error(self):\n        job_ = self.env[\"res.partner\"].with_delay().create({\"name\": \"test\"})\n        db_job = job_.db_record()\n        with self.assertRaises(exceptions.AccessError):",
        "detail": "custom-addons.queue_job.tests.test_queue_job_protected_write",
        "documentation": {}
    },
    {
        "label": "TestRequeueDeadJob",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.test_requeue_dead_job",
        "description": "custom-addons.queue_job.tests.test_requeue_dead_job",
        "peekOfCode": "class TestRequeueDeadJob(TransactionCase):\n    def create_dummy_job(self, uuid):\n        \"\"\"\n        Create dummy job for tests\n        \"\"\"\n        return (\n            self.env[\"queue.job\"]\n            .with_context(\n                _job_edit_sentinel=self.env[\"queue.job\"].EDIT_SENTINEL,\n            )",
        "detail": "custom-addons.queue_job.tests.test_requeue_dead_job",
        "documentation": {}
    },
    {
        "label": "load_tests",
        "kind": 5,
        "importPath": "custom-addons.queue_job.tests.test_runner_channels",
        "description": "custom-addons.queue_job.tests.test_runner_channels",
        "peekOfCode": "load_tests = load_doctests(channels)",
        "detail": "custom-addons.queue_job.tests.test_runner_channels",
        "documentation": {}
    },
    {
        "label": "load_tests",
        "kind": 5,
        "importPath": "custom-addons.queue_job.tests.test_runner_runner",
        "description": "custom-addons.queue_job.tests.test_runner_runner",
        "peekOfCode": "load_tests = load_doctests(runner)",
        "detail": "custom-addons.queue_job.tests.test_runner_runner",
        "documentation": {}
    },
    {
        "label": "TestWizards",
        "kind": 6,
        "importPath": "custom-addons.queue_job.tests.test_wizards",
        "description": "custom-addons.queue_job.tests.test_wizards",
        "peekOfCode": "class TestWizards(common.TransactionCase):\n    def setUp(self):\n        super().setUp()\n        self.job = (\n            self.env[\"queue.job\"]\n            .with_context(\n                _job_edit_sentinel=self.env[\"queue.job\"].EDIT_SENTINEL,\n            )\n            .create(\n                {",
        "detail": "custom-addons.queue_job.tests.test_wizards",
        "documentation": {}
    },
    {
        "label": "SetJobsToCancelled",
        "kind": 6,
        "importPath": "custom-addons.queue_job.wizards.queue_jobs_to_cancelled",
        "description": "custom-addons.queue_job.wizards.queue_jobs_to_cancelled",
        "peekOfCode": "class SetJobsToCancelled(models.TransientModel):\n    _inherit = \"queue.requeue.job\"\n    _name = \"queue.jobs.to.cancelled\"\n    _description = \"Cancel all selected jobs\"\n    def set_cancelled(self):\n        jobs = self.job_ids.filtered(\n            lambda x: x.state in (\"pending\", \"failed\", \"enqueued\")\n        )\n        jobs.button_cancelled()\n        return {\"type\": \"ir.actions.act_window_close\"}",
        "detail": "custom-addons.queue_job.wizards.queue_jobs_to_cancelled",
        "documentation": {}
    },
    {
        "label": "SetJobsToDone",
        "kind": 6,
        "importPath": "custom-addons.queue_job.wizards.queue_jobs_to_done",
        "description": "custom-addons.queue_job.wizards.queue_jobs_to_done",
        "peekOfCode": "class SetJobsToDone(models.TransientModel):\n    _inherit = \"queue.requeue.job\"\n    _name = \"queue.jobs.to.done\"\n    _description = \"Set all selected jobs to done\"\n    def set_done(self):\n        jobs = self.job_ids\n        jobs.button_done()\n        return {\"type\": \"ir.actions.act_window_close\"}",
        "detail": "custom-addons.queue_job.wizards.queue_jobs_to_done",
        "documentation": {}
    },
    {
        "label": "QueueRequeueJob",
        "kind": 6,
        "importPath": "custom-addons.queue_job.wizards.queue_requeue_job",
        "description": "custom-addons.queue_job.wizards.queue_requeue_job",
        "peekOfCode": "class QueueRequeueJob(models.TransientModel):\n    _name = \"queue.requeue.job\"\n    _description = \"Wizard to requeue a selection of jobs\"\n    def _default_job_ids(self):\n        res = False\n        context = self.env.context\n        if context.get(\"active_model\") == \"queue.job\" and context.get(\"active_ids\"):\n            res = context[\"active_ids\"]\n        return res\n    job_ids = fields.Many2many(",
        "detail": "custom-addons.queue_job.wizards.queue_requeue_job",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "custom-addons.queue_job.delay",
        "description": "custom-addons.queue_job.delay",
        "peekOfCode": "class Graph:\n    \"\"\"Acyclic directed graph holding vertices of any hashable type\n    This graph is not specifically designed to hold :class:`~Delayable`\n    instances, although ultimately it is used for this purpose.\n    \"\"\"\n    __slots__ = \"_graph\"\n    def __init__(self, graph=None):\n        if graph:\n            self._graph = graph\n        else:",
        "detail": "custom-addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "DelayableGraph",
        "kind": 6,
        "importPath": "custom-addons.queue_job.delay",
        "description": "custom-addons.queue_job.delay",
        "peekOfCode": "class DelayableGraph(Graph):\n    \"\"\"Directed Graph for :class:`~Delayable` dependencies\n    It connects together the :class:`~Delayable`, :class:`~DelayableGroup` and\n    :class:`~DelayableChain` graphs, and creates then enqueued the jobs.\n    \"\"\"\n    def _merge_graph(self, graph):\n        \"\"\"Merge a graph in the current graph\n        It takes each vertex, which can be :class:`~Delayable`,\n        :class:`~DelayableChain` or :class:`~DelayableGroup`, and updates the\n        current graph with the edges between Delayable objects (connecting",
        "detail": "custom-addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "DelayableChain",
        "kind": 6,
        "importPath": "custom-addons.queue_job.delay",
        "description": "custom-addons.queue_job.delay",
        "peekOfCode": "class DelayableChain:\n    \"\"\"Chain of delayables to form a graph\n    Delayables can be other :class:`~Delayable`, :class:`~DelayableChain` or\n    :class:`~DelayableGroup` objects.\n    A chain means that jobs must be executed sequentially.\n    A job or a group of jobs depending on a group can be executed only after\n    the last job of the chain is done.\n    Chains can be connected to other Delayable, DelayableChain or\n    DelayableGroup objects by using :meth:`~done`.\n    A Chain is enqueued by calling :meth:`~delay`, which delays the whole",
        "detail": "custom-addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "DelayableGroup",
        "kind": 6,
        "importPath": "custom-addons.queue_job.delay",
        "description": "custom-addons.queue_job.delay",
        "peekOfCode": "class DelayableGroup:\n    \"\"\"Group of delayables to form a graph\n    Delayables can be other :class:`~Delayable`, :class:`~DelayableChain` or\n    :class:`~DelayableGroup` objects.\n    A group means that jobs must be executed sequentially.\n    A job or a group of jobs depending on a group can be executed only after\n    the all the jobs of the group are done.\n    Groups can be connected to other Delayable, DelayableChain or\n    DelayableGroup objects by using :meth:`~done`.\n    A group is enqueued by calling :meth:`~delay`, which delays the whole",
        "detail": "custom-addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "Delayable",
        "kind": 6,
        "importPath": "custom-addons.queue_job.delay",
        "description": "custom-addons.queue_job.delay",
        "peekOfCode": "class Delayable:\n    \"\"\"Unit of a graph, one Delayable will lead to an enqueued job\n    Delayables can have dependencies on each others, as well as dependencies on\n    :class:`~DelayableGroup` or :class:`~DelayableChain` objects.\n    This class will generally not be used directly, it is used internally\n    by :meth:`~odoo.addons.queue_job.models.base.Base.delayable`. Look\n    in the base model for more details.\n    Delayables can be connected to other Delayable, DelayableChain or\n    DelayableGroup objects by using :meth:`~done`.\n    Properties of the future job can be set using the :meth:`~set` method,",
        "detail": "custom-addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "DelayableRecordset",
        "kind": 6,
        "importPath": "custom-addons.queue_job.delay",
        "description": "custom-addons.queue_job.delay",
        "peekOfCode": "class DelayableRecordset:\n    \"\"\"Allow to delay a method for a recordset (shortcut way)\n    Usage::\n        delayable = DelayableRecordset(recordset, priority=20)\n        delayable.method(args, kwargs)\n    The method call will be processed asynchronously in the job queue, with\n    the passed arguments.\n    This class will generally not be used directly, it is used internally\n    by :meth:`~odoo.addons.queue_job.models.base.Base.with_delay`\n    \"\"\"",
        "detail": "custom-addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 2,
        "importPath": "custom-addons.queue_job.delay",
        "description": "custom-addons.queue_job.delay",
        "peekOfCode": "def group(*delayables):\n    \"\"\"Return a group of delayable to form a graph\n    A group means that jobs can be executed concurrently.\n    A job or a group of jobs depending on a group can be executed only after\n    all the jobs of the group are done.\n    Shortcut to :class:`~odoo.addons.queue_job.delay.DelayableGroup`.\n    Example::\n        g1 = group(delayable1, delayable2)\n        g2 = group(delayable3, delayable4)\n        g1.on_done(g2)",
        "detail": "custom-addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "chain",
        "kind": 2,
        "importPath": "custom-addons.queue_job.delay",
        "description": "custom-addons.queue_job.delay",
        "peekOfCode": "def chain(*delayables):\n    \"\"\"Return a chain of delayable to form a graph\n    A chain means that jobs must be executed sequentially.\n    A job or a group of jobs depending on a group can be executed only after\n    the last job of the chain is done.\n    Shortcut to :class:`~odoo.addons.queue_job.delay.DelayableChain`.\n    Example::\n        chain1 = chain(delayable1, delayable2, delayable3)\n        chain2 = chain(delayable4, delayable5, delayable6)\n        chain1.on_done(chain2)",
        "detail": "custom-addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.queue_job.delay",
        "description": "custom-addons.queue_job.delay",
        "peekOfCode": "_logger = logging.getLogger(__name__)\ndef group(*delayables):\n    \"\"\"Return a group of delayable to form a graph\n    A group means that jobs can be executed concurrently.\n    A job or a group of jobs depending on a group can be executed only after\n    all the jobs of the group are done.\n    Shortcut to :class:`~odoo.addons.queue_job.delay.DelayableGroup`.\n    Example::\n        g1 = group(delayable1, delayable2)\n        g2 = group(delayable3, delayable4)",
        "detail": "custom-addons.queue_job.delay",
        "documentation": {}
    },
    {
        "label": "BaseQueueJobError",
        "kind": 6,
        "importPath": "custom-addons.queue_job.exception",
        "description": "custom-addons.queue_job.exception",
        "peekOfCode": "class BaseQueueJobError(Exception):\n    \"\"\"Base queue job error\"\"\"\nclass JobError(BaseQueueJobError):\n    \"\"\"A job had an error\"\"\"\nclass NoSuchJobError(JobError):\n    \"\"\"The job does not exist.\"\"\"\nclass FailedJobError(JobError):\n    \"\"\"A job had an error having to be resolved.\"\"\"\nclass RetryableJobError(JobError):\n    \"\"\"A job had an error but can be retried.",
        "detail": "custom-addons.queue_job.exception",
        "documentation": {}
    },
    {
        "label": "JobError",
        "kind": 6,
        "importPath": "custom-addons.queue_job.exception",
        "description": "custom-addons.queue_job.exception",
        "peekOfCode": "class JobError(BaseQueueJobError):\n    \"\"\"A job had an error\"\"\"\nclass NoSuchJobError(JobError):\n    \"\"\"The job does not exist.\"\"\"\nclass FailedJobError(JobError):\n    \"\"\"A job had an error having to be resolved.\"\"\"\nclass RetryableJobError(JobError):\n    \"\"\"A job had an error but can be retried.\n    The job will be retried after the given number of seconds.  If seconds is\n    empty, it will be retried according to the ``retry_pattern`` of the job or",
        "detail": "custom-addons.queue_job.exception",
        "documentation": {}
    },
    {
        "label": "NoSuchJobError",
        "kind": 6,
        "importPath": "custom-addons.queue_job.exception",
        "description": "custom-addons.queue_job.exception",
        "peekOfCode": "class NoSuchJobError(JobError):\n    \"\"\"The job does not exist.\"\"\"\nclass FailedJobError(JobError):\n    \"\"\"A job had an error having to be resolved.\"\"\"\nclass RetryableJobError(JobError):\n    \"\"\"A job had an error but can be retried.\n    The job will be retried after the given number of seconds.  If seconds is\n    empty, it will be retried according to the ``retry_pattern`` of the job or\n    by :const:`odoo.addons.queue_job.job.RETRY_INTERVAL` if nothing is defined.\n    If ``ignore_retry`` is True, the retry counter will not be increased.",
        "detail": "custom-addons.queue_job.exception",
        "documentation": {}
    },
    {
        "label": "FailedJobError",
        "kind": 6,
        "importPath": "custom-addons.queue_job.exception",
        "description": "custom-addons.queue_job.exception",
        "peekOfCode": "class FailedJobError(JobError):\n    \"\"\"A job had an error having to be resolved.\"\"\"\nclass RetryableJobError(JobError):\n    \"\"\"A job had an error but can be retried.\n    The job will be retried after the given number of seconds.  If seconds is\n    empty, it will be retried according to the ``retry_pattern`` of the job or\n    by :const:`odoo.addons.queue_job.job.RETRY_INTERVAL` if nothing is defined.\n    If ``ignore_retry`` is True, the retry counter will not be increased.\n    \"\"\"\n    def __init__(self, msg, seconds=None, ignore_retry=False):",
        "detail": "custom-addons.queue_job.exception",
        "documentation": {}
    },
    {
        "label": "RetryableJobError",
        "kind": 6,
        "importPath": "custom-addons.queue_job.exception",
        "description": "custom-addons.queue_job.exception",
        "peekOfCode": "class RetryableJobError(JobError):\n    \"\"\"A job had an error but can be retried.\n    The job will be retried after the given number of seconds.  If seconds is\n    empty, it will be retried according to the ``retry_pattern`` of the job or\n    by :const:`odoo.addons.queue_job.job.RETRY_INTERVAL` if nothing is defined.\n    If ``ignore_retry`` is True, the retry counter will not be increased.\n    \"\"\"\n    def __init__(self, msg, seconds=None, ignore_retry=False):\n        super().__init__(msg)\n        self.seconds = seconds",
        "detail": "custom-addons.queue_job.exception",
        "documentation": {}
    },
    {
        "label": "NothingToDoJob",
        "kind": 6,
        "importPath": "custom-addons.queue_job.exception",
        "description": "custom-addons.queue_job.exception",
        "peekOfCode": "class NothingToDoJob(JobError):\n    \"\"\"The Job has nothing to do.\"\"\"\nclass ChannelNotFound(BaseQueueJobError):\n    \"\"\"A channel could not be found\"\"\"",
        "detail": "custom-addons.queue_job.exception",
        "documentation": {}
    },
    {
        "label": "ChannelNotFound",
        "kind": 6,
        "importPath": "custom-addons.queue_job.exception",
        "description": "custom-addons.queue_job.exception",
        "peekOfCode": "class ChannelNotFound(BaseQueueJobError):\n    \"\"\"A channel could not be found\"\"\"",
        "detail": "custom-addons.queue_job.exception",
        "documentation": {}
    },
    {
        "label": "JobSerialized",
        "kind": 6,
        "importPath": "custom-addons.queue_job.fields",
        "description": "custom-addons.queue_job.fields",
        "peekOfCode": "class JobSerialized(fields.Field):\n    \"\"\"Provide the storage for job fields stored as json\n    A base_type must be set, it must be dict, list or tuple.\n    When the field is not set, the json will be the corresponding\n    json string (\"{}\" or \"[]\").\n    Support for some custom types has been added to the json decoder/encoder\n    (see JobEncoder and JobDecoder).\n    \"\"\"\n    type = \"job_serialized\"\n    column_type = (\"text\", \"text\")",
        "detail": "custom-addons.queue_job.fields",
        "documentation": {}
    },
    {
        "label": "JobEncoder",
        "kind": 6,
        "importPath": "custom-addons.queue_job.fields",
        "description": "custom-addons.queue_job.fields",
        "peekOfCode": "class JobEncoder(json.JSONEncoder):\n    \"\"\"Encode Odoo recordsets so that we can later recompose them\"\"\"\n    def _get_record_context(self, obj):\n        return obj._job_prepare_context_before_enqueue()\n    def default(self, obj):\n        if isinstance(obj, models.BaseModel):\n            return {\n                \"_type\": \"odoo_recordset\",\n                \"model\": obj._name,\n                \"ids\": obj.ids,",
        "detail": "custom-addons.queue_job.fields",
        "documentation": {}
    },
    {
        "label": "JobDecoder",
        "kind": 6,
        "importPath": "custom-addons.queue_job.fields",
        "description": "custom-addons.queue_job.fields",
        "peekOfCode": "class JobDecoder(json.JSONDecoder):\n    \"\"\"Decode json, recomposing recordsets\"\"\"\n    def __init__(self, *args, **kwargs):\n        env = kwargs.pop(\"env\")\n        super().__init__(object_hook=self.object_hook, *args, **kwargs)\n        assert env\n        self.env = env\n    def object_hook(self, obj):\n        if \"_type\" not in obj:\n            return obj",
        "detail": "custom-addons.queue_job.fields",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "class Job:\n    \"\"\"A Job is a task to execute. It is the in-memory representation of a job.\n    Jobs are stored in the ``queue.job`` Odoo Model, but they are handled\n    through this class.\n    .. attribute:: uuid\n        Id (UUID) of the job.\n    .. attribute:: graph_uuid\n        Shared UUID of the job's graph. Empty if the job is a single job.\n    .. attribute:: state\n        State of the job, can pending, enqueued, started, done or failed.",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "DelayableRecordset",
        "kind": 2,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "def DelayableRecordset(*args, **kwargs):\n    # prevent circular import\n    from .delay import DelayableRecordset as dr\n    _logger.warning(\n        \"DelayableRecordset moved from the queue_job.job\"\n        \" to the queue_job.delay python module\"\n    )\n    return dr(*args, **kwargs)\ndef identity_exact(job_):\n    \"\"\"Identity function using the model, method and all arguments as key",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "identity_exact",
        "kind": 2,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "def identity_exact(job_):\n    \"\"\"Identity function using the model, method and all arguments as key\n    When used, this identity key will have the effect that when a job should be\n    created and a pending job with the exact same recordset and arguments, the\n    second will not be created.\n    It should be used with the ``identity_key`` argument:\n    .. python::\n        from odoo.addons.queue_job.job import identity_exact\n        # [...]\n            delayable = self.with_delay(identity_key=identity_exact)",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "identity_exact_hasher",
        "kind": 2,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "def identity_exact_hasher(job_):\n    \"\"\"Prepare hasher object for identity_exact.\"\"\"\n    hasher = hashlib.sha1()\n    hasher.update(job_.model_name.encode(\"utf-8\"))\n    hasher.update(job_.method_name.encode(\"utf-8\"))\n    hasher.update(str(sorted(job_.recordset.ids)).encode(\"utf-8\"))\n    hasher.update(str(job_.args).encode(\"utf-8\"))\n    hasher.update(str(sorted(job_.kwargs.items())).encode(\"utf-8\"))\n    return hasher\n@total_ordering",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "WAIT_DEPENDENCIES",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "WAIT_DEPENDENCIES = \"wait_dependencies\"\nPENDING = \"pending\"\nENQUEUED = \"enqueued\"\nCANCELLED = \"cancelled\"\nDONE = \"done\"\nSTARTED = \"started\"\nFAILED = \"failed\"\nSTATES = [\n    (WAIT_DEPENDENCIES, \"Wait Dependencies\"),\n    (PENDING, \"Pending\"),",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "PENDING",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "PENDING = \"pending\"\nENQUEUED = \"enqueued\"\nCANCELLED = \"cancelled\"\nDONE = \"done\"\nSTARTED = \"started\"\nFAILED = \"failed\"\nSTATES = [\n    (WAIT_DEPENDENCIES, \"Wait Dependencies\"),\n    (PENDING, \"Pending\"),\n    (ENQUEUED, \"Enqueued\"),",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "ENQUEUED",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "ENQUEUED = \"enqueued\"\nCANCELLED = \"cancelled\"\nDONE = \"done\"\nSTARTED = \"started\"\nFAILED = \"failed\"\nSTATES = [\n    (WAIT_DEPENDENCIES, \"Wait Dependencies\"),\n    (PENDING, \"Pending\"),\n    (ENQUEUED, \"Enqueued\"),\n    (STARTED, \"Started\"),",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "CANCELLED",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "CANCELLED = \"cancelled\"\nDONE = \"done\"\nSTARTED = \"started\"\nFAILED = \"failed\"\nSTATES = [\n    (WAIT_DEPENDENCIES, \"Wait Dependencies\"),\n    (PENDING, \"Pending\"),\n    (ENQUEUED, \"Enqueued\"),\n    (STARTED, \"Started\"),\n    (DONE, \"Done\"),",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "DONE",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "DONE = \"done\"\nSTARTED = \"started\"\nFAILED = \"failed\"\nSTATES = [\n    (WAIT_DEPENDENCIES, \"Wait Dependencies\"),\n    (PENDING, \"Pending\"),\n    (ENQUEUED, \"Enqueued\"),\n    (STARTED, \"Started\"),\n    (DONE, \"Done\"),\n    (CANCELLED, \"Cancelled\"),",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "STARTED",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "STARTED = \"started\"\nFAILED = \"failed\"\nSTATES = [\n    (WAIT_DEPENDENCIES, \"Wait Dependencies\"),\n    (PENDING, \"Pending\"),\n    (ENQUEUED, \"Enqueued\"),\n    (STARTED, \"Started\"),\n    (DONE, \"Done\"),\n    (CANCELLED, \"Cancelled\"),\n    (FAILED, \"Failed\"),",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "FAILED",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "FAILED = \"failed\"\nSTATES = [\n    (WAIT_DEPENDENCIES, \"Wait Dependencies\"),\n    (PENDING, \"Pending\"),\n    (ENQUEUED, \"Enqueued\"),\n    (STARTED, \"Started\"),\n    (DONE, \"Done\"),\n    (CANCELLED, \"Cancelled\"),\n    (FAILED, \"Failed\"),\n]",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "STATES",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "STATES = [\n    (WAIT_DEPENDENCIES, \"Wait Dependencies\"),\n    (PENDING, \"Pending\"),\n    (ENQUEUED, \"Enqueued\"),\n    (STARTED, \"Started\"),\n    (DONE, \"Done\"),\n    (CANCELLED, \"Cancelled\"),\n    (FAILED, \"Failed\"),\n]\nDEFAULT_PRIORITY = 10  # used by the PriorityQueue to sort the jobs",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PRIORITY",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "DEFAULT_PRIORITY = 10  # used by the PriorityQueue to sort the jobs\nDEFAULT_MAX_RETRIES = 5\nRETRY_INTERVAL = 10 * 60  # seconds\n_logger = logging.getLogger(__name__)\n# TODO remove in 15.0 or 16.0, used to keep compatibility as the\n# class has been moved in 'delay'.\ndef DelayableRecordset(*args, **kwargs):\n    # prevent circular import\n    from .delay import DelayableRecordset as dr\n    _logger.warning(",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MAX_RETRIES",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "DEFAULT_MAX_RETRIES = 5\nRETRY_INTERVAL = 10 * 60  # seconds\n_logger = logging.getLogger(__name__)\n# TODO remove in 15.0 or 16.0, used to keep compatibility as the\n# class has been moved in 'delay'.\ndef DelayableRecordset(*args, **kwargs):\n    # prevent circular import\n    from .delay import DelayableRecordset as dr\n    _logger.warning(\n        \"DelayableRecordset moved from the queue_job.job\"",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "RETRY_INTERVAL",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "RETRY_INTERVAL = 10 * 60  # seconds\n_logger = logging.getLogger(__name__)\n# TODO remove in 15.0 or 16.0, used to keep compatibility as the\n# class has been moved in 'delay'.\ndef DelayableRecordset(*args, **kwargs):\n    # prevent circular import\n    from .delay import DelayableRecordset as dr\n    _logger.warning(\n        \"DelayableRecordset moved from the queue_job.job\"\n        \" to the queue_job.delay python module\"",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.queue_job.job",
        "description": "custom-addons.queue_job.job",
        "peekOfCode": "_logger = logging.getLogger(__name__)\n# TODO remove in 15.0 or 16.0, used to keep compatibility as the\n# class has been moved in 'delay'.\ndef DelayableRecordset(*args, **kwargs):\n    # prevent circular import\n    from .delay import DelayableRecordset as dr\n    _logger.warning(\n        \"DelayableRecordset moved from the queue_job.job\"\n        \" to the queue_job.delay python module\"\n    )",
        "detail": "custom-addons.queue_job.job",
        "documentation": {}
    },
    {
        "label": "post_init_hook",
        "kind": 2,
        "importPath": "custom-addons.queue_job.post_init_hook",
        "description": "custom-addons.queue_job.post_init_hook",
        "peekOfCode": "def post_init_hook(cr, registry):\n    # this is the trigger that sends notifications when jobs change\n    logger.info(\"Create queue_job_notify trigger\")\n    cr.execute(\n        \"\"\"\n            DROP TRIGGER IF EXISTS queue_job_notify ON queue_job;\n            CREATE OR REPLACE\n                FUNCTION queue_job_notify() RETURNS trigger AS $$\n            BEGIN\n                IF TG_OP = 'DELETE' THEN",
        "detail": "custom-addons.queue_job.post_init_hook",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "custom-addons.queue_job.post_init_hook",
        "description": "custom-addons.queue_job.post_init_hook",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef post_init_hook(cr, registry):\n    # this is the trigger that sends notifications when jobs change\n    logger.info(\"Create queue_job_notify trigger\")\n    cr.execute(\n        \"\"\"\n            DROP TRIGGER IF EXISTS queue_job_notify ON queue_job;\n            CREATE OR REPLACE\n                FUNCTION queue_job_notify() RETURNS trigger AS $$\n            BEGIN",
        "detail": "custom-addons.queue_job.post_init_hook",
        "documentation": {}
    },
    {
        "label": "post_load",
        "kind": 2,
        "importPath": "custom-addons.queue_job.post_load",
        "description": "custom-addons.queue_job.post_load",
        "peekOfCode": "def post_load():\n    _logger.info(\n        \"Apply Request._get_session_and_dbname monkey patch to capture db\"\n        \" from request with multiple databases\"\n    )\n    _get_session_and_dbname_orig = http.Request._get_session_and_dbname\n    def _get_session_and_dbname(self):\n        session, dbname = _get_session_and_dbname_orig(self)\n        if (\n            not dbname",
        "detail": "custom-addons.queue_job.post_load",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.queue_job.post_load",
        "description": "custom-addons.queue_job.post_load",
        "peekOfCode": "_logger = logging.getLogger(__name__)\ndef post_load():\n    _logger.info(\n        \"Apply Request._get_session_and_dbname monkey patch to capture db\"\n        \" from request with multiple databases\"\n    )\n    _get_session_and_dbname_orig = http.Request._get_session_and_dbname\n    def _get_session_and_dbname(self):\n        session, dbname = _get_session_and_dbname_orig(self)\n        if (",
        "detail": "custom-addons.queue_job.post_load",
        "documentation": {}
    },
    {
        "label": "must_run_without_delay",
        "kind": 2,
        "importPath": "custom-addons.queue_job.utils",
        "description": "custom-addons.queue_job.utils",
        "peekOfCode": "def must_run_without_delay(env):\n    \"\"\"Retrun true if jobs have to run immediately.\n    :param env: `odoo.api.Environment` instance\n    \"\"\"\n    # TODO: drop in v17\n    if os.getenv(\"TEST_QUEUE_JOB_NO_DELAY\"):\n        _logger.warning(\n            \"`TEST_QUEUE_JOB_NO_DELAY`  env var found. NO JOB scheduled. \"\n            \"Note that this key is deprecated: please use `QUEUE_JOB__NO_DELAY`\"\n        )",
        "detail": "custom-addons.queue_job.utils",
        "documentation": {}
    },
    {
        "label": "_logger",
        "kind": 5,
        "importPath": "custom-addons.queue_job.utils",
        "description": "custom-addons.queue_job.utils",
        "peekOfCode": "_logger = logging.getLogger(__name__)\ndef must_run_without_delay(env):\n    \"\"\"Retrun true if jobs have to run immediately.\n    :param env: `odoo.api.Environment` instance\n    \"\"\"\n    # TODO: drop in v17\n    if os.getenv(\"TEST_QUEUE_JOB_NO_DELAY\"):\n        _logger.warning(\n            \"`TEST_QUEUE_JOB_NO_DELAY`  env var found. NO JOB scheduled. \"\n            \"Note that this key is deprecated: please use `QUEUE_JOB__NO_DELAY`\"",
        "detail": "custom-addons.queue_job.utils",
        "documentation": {}
    },
    {
        "label": "leer_excel",
        "kind": 2,
        "importPath": "medio",
        "description": "medio",
        "peekOfCode": "def leer_excel(url):\n    \"\"\"\n    Lee el archivo Excel desde la URL proporcionada.\n    Args:\n        url (str): URL del archivo Excel.\n    Returns:\n        pandas.DataFrame: DataFrame con los datos del Excel.\n    \"\"\"\n    try:\n        df = pd.read_excel(url, engine=\"openpyxl\")",
        "detail": "medio",
        "documentation": {}
    },
    {
        "label": "generar_txt",
        "kind": 2,
        "importPath": "medio",
        "description": "medio",
        "peekOfCode": "def generar_txt(df, ruta):\n    \"\"\"\n    Genera un archivo de texto a partir de un DataFrame.\n    Args:\n        df (pandas.DataFrame): DataFrame a convertir.\n        ruta (str): Ruta donde se guardará el archivo de texto.\n    \"\"\"\n    df_string = df.to_string(index=False, header=False)\n    df_string = df_string.replace(\" \", \"\")\n    df_string = df_string.replace(\"\\n\", \" \")",
        "detail": "medio",
        "documentation": {}
    },
    {
        "label": "Transformacion",
        "kind": 6,
        "importPath": "transformaciones",
        "description": "transformaciones",
        "peekOfCode": "class Transformacion(ABC):\n    @abstractmethod\n    def transformar(self, df, columna_nombre, regla):\n        pass\nclass TransformacionAnio(Transformacion):\n    def transformar(self, df, columna_nombre, regla):\n        if columna_nombre in df.columns:\n            try:\n                df[columna_nombre] = df[columna_nombre].astype(\n                    int).astype(str).str.zfill(regla[\"TAMANO\"])",
        "detail": "transformaciones",
        "documentation": {}
    },
    {
        "label": "TransformacionAnio",
        "kind": 6,
        "importPath": "transformaciones",
        "description": "transformaciones",
        "peekOfCode": "class TransformacionAnio(Transformacion):\n    def transformar(self, df, columna_nombre, regla):\n        if columna_nombre in df.columns:\n            try:\n                df[columna_nombre] = df[columna_nombre].astype(\n                    int).astype(str).str.zfill(regla[\"TAMANO\"])\n            except (ValueError, TypeError):\n                return None\n        return df\nclass TransformacionConcepto(Transformacion):",
        "detail": "transformaciones",
        "documentation": {}
    },
    {
        "label": "TransformacionConcepto",
        "kind": 6,
        "importPath": "transformaciones",
        "description": "transformaciones",
        "peekOfCode": "class TransformacionConcepto(Transformacion):\n    def transformar(self, df, columna_nombre, regla):\n        if columna_nombre in df.columns:\n            df[columna_nombre] = df[columna_nombre].astype(str).str[:regla[\"TAMANO\"]].str.ljust(regla[\"TAMANO\"], '$')\n        return df\nclass TransformacionValor(Transformacion):\n    def transformar(self, df, columna_nombre, regla):\n        if columna_nombre in df.columns:\n            try:\n                if pd.isna(df[columna_nombre]).any():",
        "detail": "transformaciones",
        "documentation": {}
    },
    {
        "label": "TransformacionValor",
        "kind": 6,
        "importPath": "transformaciones",
        "description": "transformaciones",
        "peekOfCode": "class TransformacionValor(Transformacion):\n    def transformar(self, df, columna_nombre, regla):\n        if columna_nombre in df.columns:\n            try:\n                if pd.isna(df[columna_nombre]).any():\n                    df[columna_nombre] = df[columna_nombre].replace(np.nan, '')\n                df[columna_nombre] = df[columna_nombre].astype(\n                    int).astype(str).str.zfill(regla[\"TAMANO\"])\n            except (ValueError, TypeError):\n                return None",
        "detail": "transformaciones",
        "documentation": {}
    },
    {
        "label": "TransformacionFactory",
        "kind": 6,
        "importPath": "transformaciones",
        "description": "transformaciones",
        "peekOfCode": "class TransformacionFactory:\n    def crear_transformacion(self, nombre_columna):\n        if nombre_columna == \"ANIO\":\n            return TransformacionAnio()\n        elif nombre_columna == \"CONCEPTO\":\n            return TransformacionConcepto()\n        elif nombre_columna == \"VALOR\":\n            return TransformacionValor()\n        else:\n            raise ValueError(",
        "detail": "transformaciones",
        "documentation": {}
    },
    {
        "label": "ExcelTransformer",
        "kind": 6,
        "importPath": "transformaciones",
        "description": "transformaciones",
        "peekOfCode": "class ExcelTransformer:\n    def __init__(self, reglas: List[dict], transformacion_factory: TransformacionFactory, columnas_a_transformar: Optional[List[str]] = None):\n        self.reglas = reglas\n        self.transformacion_factory = transformacion_factory\n        self.columnas_a_transformar = columnas_a_transformar if columnas_a_transformar else [\n            regla[\"nombre\"] for regla in self.reglas]\n    def transformar_dataframe(self, df: pd.DataFrame) -> Optional[pd.DataFrame]:\n        df_transformado = df[self.columnas_a_transformar].copy()\n        for regla in self.reglas:\n            nombre_columna = regla[\"nombre\"]",
        "detail": "transformaciones",
        "documentation": {}
    },
    {
        "label": "leer_json",
        "kind": 2,
        "importPath": "transformaciones",
        "description": "transformaciones",
        "peekOfCode": "def leer_json(url):\n    \"\"\"\n    Lee el archivo JSON desde la URL proporcionada.\n    Args:\n        url (str): URL del archivo JSON.\n    Returns:\n        dict: Diccionario con los datos del JSON.\n    \"\"\"\n    try:\n        with open(url, 'r') as file:",
        "detail": "transformaciones",
        "documentation": {}
    }
]